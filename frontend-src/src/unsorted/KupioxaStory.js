import Print from "../components/Kupioxa/Animantion/Print";
import Vars from "../components/Kupioxa/Animantion/Vars";

export default [
    {
        type: 'story',
        title: 'Как Кирюха программистом стал<br> и не зациклился',
        text: `<p>Перед вами курс по Python начального уровня. Уверен, многие согласятся,
                    что не видели подобных курсов раньше.</p>

                <p>Поэтому как только вы захотите освоить азы программирования, и поймете, что умеете читать, писать и немного обращаться
                    с компьютером &mdash; сразу же приступайте.</p>`,
        nextChapterButtonText: 'Поехали!'
    },
    {
        type: 'story',
        text: `<p>Весеннее солнце ярко светило в окно и нежно гладило тёплыми лучами кудрявый Кирюхин затылок.
                Вокруг что-то монотонно бубнили, а за окном весело щебетали птички.</p>

               <p>Было так тепло и хорошо, что Кирюха даже немного задремал, сложив голову на скрещенные руки.</p>`,
        nextChapterButtonText: 'Как вдруг...'
    },
    {
        type: 'story',
        text: `<p>&mdash; Петров! К доске! &mdash; раскатисто громыхнуло в безмятежности.<br>
                    Этого он никак не ожидал.</p>
                <p>Медленно переставляя ноги, он поковылял к месту будущего позора. Вся надежда теперь на Жулю.</p> 
                <p>Уже у доски, делая вид, что чешет затылок, Кирюха прошептал браслету на руке:<br>
                &mdash; Ну, Жулище, ну выручи в последний разочек! Ну помоги решить примеры! Пожа-а-алуйста!</p>`,
        nextChapterButtonText: '- Ну ладно, так и быть...'
    },
    {
        type: 'task',
        taskCode: 'print',
        text: `<p>Строгим учительским почерком на доске было написано четыре примера. Именно их предлагалось решить. И записать
                    результат на доске, конечно. Иначе за что хвалить-то?</p>
                <p>Щелкая простые задачи, Жуля с подозрением поглядывала на Кирюху. &laquo;Филонит, сорванец!&raquo;</p>`,
        nextChapterButtonText: 'Все верно! Ура!',
        formalDescription: `
                <p>Любая программа состоит из команд. Команды можно создавать самим, когда не хватает встроенных. Каждая команда указывается с новой строки.</p>
                <p>У некоторых команд есть аргументы. Например, мы командуем: "Забей болт!". "Забей" это команда, а "болт" &mdash; аргумент. Аргумент это то,
                с чем будет работать команда.</p>
                <p>Одна из самых важных команд - <code>print()</code>. Она нужна для вывода результата на экран.
                Как иначе узнать, что программа сработала?</p>
                <p>Нужно ли говорить, что именно этой командой Жуля и общается с окружающим миром.</p>
                <p>Команду <code>print()</code> можно использовать много раз в любом месте программы. 
                Аргументы для любой команды, и для <code>print()</code> в том числе, мы указываем внутри скобок. Этот аргумент она и напечатает.</p>
                <p>Программу можно запускать сколько угодно раз. И когда вам покажется, что она работает как надо &mdash; смело жмите
                на кнопку проверки результата и двигайтесь дальше.</p>
        `,
        starterCode: 'print(1+1)\n\n',
        prefixCode: false,
        visualComponent: Print,
        tests: [{
            exec: false,
            expect: "2\n12\n-2\n4.5\n"
        }],
        validator: function (stdout, test) {
            return stdout === test.expect || "Что-то посчитано неправильно";
        }
    },
    {
        type: 'story',
        text: `<p>&mdash; Это в последний раз, когда я помогаю тебе бездельничать, &mdash; обиженно заявила Жуля.</p>
<p>&mdash; Спасибо, Жуууулечка! Что бы я без тебя делал! Давай купим тебе батареек?</p>
<p>&mdash; Клубничных? &mdash; Жуля пыталась делать вид, что еще обижается.</p>
<p>&mdash; Хоть клубничных, хоть ананасовых!</p>

<p>В ближайшем к школе магазе Кирюха понял, что тоже хочет шоколадку.</p>`,
        nextChapterButtonText: 'Только вот незадача...'
    },
    {
        type: 'task',
        taskCode: 'vars',
        text: `<p>Достав горстку монет из левого кармана, Кирюха понял, что может и не хватить.</p>
                <p>&mdash; Жуля, нужна помощь! Я буду говорить цену, а ты запоминай и складывай! </p>`,
        nextChapterButtonText: 'Ням! Клубничные, мои любимые!',
        formalDescription: `
            <p>Прежде чем вы двинетесь дальше, вопрос. Насколько хорошо вы помните первый урок о том, как Жуля общается с Кирюхой?</p>
            <p class="mb-4">Если честно, я рад, что вы помните про <code>print()</code>, а значит можно двигаться дальше.</p>
            <p>Хорошо, когда все данные для программы известны заранее. Так было, когда Кирюха стоял у доски, и все
            примеры были перед глазами. Но так получается далеко не всегда.</p>
            <p>Чаще программа работает с данными, которые неизвестны заранее. Жуля, например, не знает, что схватит Кирюха в
            следующий раз. А программист заранее не знает, какую шоколадку выберет
            покупатель в интернет-магазине.</p>
            <p>Но программа должна работать с любыми данными! И вот что придумали программисты.</p>
            <p>Они придумали давать данным имена! А точнее давать имена специальным корзинкам, которые будут хранить эти данные.
            Например, назвать корзинку для цены батареек <code>a</code>, а корзинку для цены шоколадки &mdash; <code>b</code>.
            И теперь уже не важно, что цены неизвестны заранее. Ведь мы всегда можем их сложить, используя эти имена.</p>
            <p>Такая корзинка с именем у программистов называется &laquo;переменной&raquo;. &laquo;Переменной&raquo; потому, что содержимое
            этой корзинки может меняться. А вот ее название всегда постоянно.</p>
            <p>Положить данные в корзинку можно при помощи знака равенства <code>=</code>. Слева пишется название корзинки,
            а справа &mdash; данные, которые туда кладутся. Это действие у программистов называется &laquo;присвоение&raquo;.</p>
            <p>Присвоение работает чуть иначе, чем математический знак равенства. В математике &laquo;равно&raquo; &mdash; сравнивает. Математическое равенство
            говорит о том, что выражение слева по-сути совпадает с выражением справа.</p>
            <p>А &laquo;присвоение&raquo; у программистов &mdash; приравнивает. Оно как бы говорит Жуле: &laquo;Возьми то,
            что справа и положи в корзинку с названием, которое написано слева&raquo;.</p>
        `,
        testIsPrefix: true,
        starterCode: false,
        prefixCode: false,
        visualComponent: Vars,
        tests: [
            {
                exec: 'a=11.3\nb=21',
                expect: "32.3"
            },
            {
                exec: 'a=7.2\nb=10.3',
                expect: "17.5"
            },
            {
                exec: 'a=2.5\nb=3',
                expect: "5.5"
            },
        ],
        validator: function (stdout, test) {
            if (!stdout) {
                return "Жуля, не молчи! Скажи что-нибудь!"
            }

            return stdout.trim() === test.expect || "Что-то посчитано неправильно";
        }
    },
    {
        type: 'finish',
        title: 'Пока все!',
        text: `<p>Насколько тебе понравился подход?</p>
               <p>Продолжать ли историю Кирюхи?</p>`
    }
]